

//Worldspawn


entityDef worldspawn 
{
	"editor_color"            "0 0 0"
	"editor_mins"             "?"
	"editor_maxs"             "?"

	"editor_usage"            "Map geometry entity, only one worldspawn entity is allowed per map"
	"editor_var music"        "music"
	"editor_var gravity"      "gravity"
	"editor_var no_stamina"   "player can always run"
	"editor_var no_Weapons"   "only first weapon and no attacks"

	"spawnclass"			  "idWorldspawn"
	"gravity"				  "1000"
	"name"					  "world"
}

//Lights

entityDef light
{
	"editor_color"				"0 1 0"
	"editor_mins"				"-8 -8 -8"
	"editor_maxs"				"8 8 8"
	"editor_rotatable"			"1"

	"editor_usage"				"Light source.  If health is set, light becomes breakable and turns off when shot."
	
	"editor_material texture"		"light shader to use."
	"editor_color color"			"light color"
	"editor_var shaderParm3"	"shaderParm 3"
	"editor_var shaderParm4"	"shaderParm 4"
	"editor_var shaderParm5"	"shaderParm 5"
	"editor_var shaderParm6"	"shaderParm 6"
	"editor_var shaderParm7"	"shaderParm 7"
	"editor_var count"			"how many times light must be triggered to toggle."
	"editor_var break"			"break when triggered."
	"editor_model model"			"model to use."
	"editor_model broken"			"model to use when the light is broken (defaults to model name with '_broken' appended to name)"
	"editor_var hideModelOnBreak" "hides the model when broken"
	"editor_var health"			"amount of damage to recieve before becoming broken.  0 is nonbreakable."
	"editor_var target"			"entities to trigger if shot."
	"editor_var levels"			"the number of times a light must be triggered until it turns off.  Each time it's triggered, it's dimmed to a lower level."
	"editor_var start_off"		"causes the light to be off when the level starts."
	"editor_var snd_broken"		"sound shader to use when broken"
	"editor_var mtr_broken"		"material to use when broken"
	"editor_color color_demonic"	"demonic color to use if in demonic mode."
	"editor_material mat_demonic"	"demonic shader to use if in demonic mode."
	"editor_var leave_demonic_mat" "leaves the demonic shader when the effect expires.. color is still reverted back."

	"spawnclass"				"idLight"
	"health"					"0"
	"levels"					"1"
	"start_off"					"0"
	"count"						"1"
	"break"						"0"
	
	// jmarshall: Quake 1 light styles
	/*
	"style"						"-1"
	
	"ls_frametime"				"100"
	
	"num_styles"				"12"
		
	"light_style0" 				"m"
	"light_style1" 				"mmnmmommommnonmmonqnmmo"
	"light_style2" 				"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba"
	"light_style3"				"mmmmmaaaaammmmmaaaaaabcdefgabcdefg"
	"light_style4"				"mamamamamama"
	"light_style5"				"jklmnopqrstuvwxyzyxwvutsrqponmlkj"
	"light_style6"				"nmonqnmomnmomomno"
	"light_style7"				"mmmaaaabcdefgmmmmaaaammmaamm"
	"light_style8"				"mmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa"
	"light_style9"				"aaaaaaaazzzzzzzz"
	"light_style10"				"mmamammmmammamamaaamammma"
	"light_style11"				"abcdefghijklmnopqrrqponmlkjihgfedcba"
	*/
	// jmarshall end
}


//Speaker


entityDef speaker
{
	"editor_color"					"0 1 0"
	"editor_mins"					"-8 -8 -8"
	"editor_maxs"					"8 8 8"
	"editor_material"				"textures/editor/speaker"
	

	"editor_usage"					"Sound source. Use to add atmospheric sound effects on your map or add background music."
	
	"editor_snd s_shader"			"specify a sound file (.wav or .ogg) or a sound shader."
	"editor_snd snd_demonic"		"reserved field (?)"
	"editor_var overlayDemonic"		"to overlay sound with snd_demonic instead of replacing it, set this to 1."
	"editor_var s_waitfortrigger"	"set to 1 to play the sound when triggered. 0 to play it on map load."
	"editor_var s_volume"			"override sound shader volume level."
	"editor_var s_minDistance"		"override sound shader minDistance."
	"editor_var s_maxDistance"		"override sound shader maxDistance."
	"editor_var s_omni"				"force sound to be omnidirectional."
	"editor_var s_looping"			"force sound to loop continuously."
	"editor_var s_occlusion"		"do not occlude this sound by portals"
	"editor_var s_global"			"play sound at the same volume level across the map (no falloff at all)"
	"editor_var s_bgmusic"			"flags this speaker as background music source to allow independent volume control via menu."
	"editor_var s_shakes"			"when the sound is loud this entity makes the screen shake."
	"editor_var wait"				"specifies seconds between triggerings when set > 0."
	"editor_var random"				"every wait time will be random."
	
	"spawnclass"					"idSound"
}


//Portalskies


entityDef info_portalSky
{
	"editor_color"			"1 .5 0"
	"editor_mins"			"-16 -16 0"
	"editor_maxs"			"16 16 32"
	"editor_showangle"		"1"
	"editor_usage"			"Specifies location for portal sky.  Multiple portalsky locations are supported, with one 'currently active' info_portalSky providing the view for all portal sky brushes.  Triggering an info_portalSky will make it 'current', even if it didn't have a 'triggered' flag to start with."
	"editor_var triggered"	"This portal sky will be inactive at start, and must be triggered to become active.  All additional portalsky areas must have this flag set."
	
	"spawnclass"			"idPortalSky"
	"hide"					"1"
}

entityDef info_portalSky_local
{
    "inherit"               "info_portalSky"
    "editor_color"          ".5 .5 0"
    "editor_mins"           "-1 -1 -4"
    "editor_maxs"           "1 1 0"
    "ps_type"               "2"
    "editor_usage"          "Every time that it gets triggered, it changes the portalSky that follows the player starting from this spot."
}

entityDef info_portalSky_global
{
    "inherit"               "info_portalSky"
    "editor_color"          ".75 .75 0"
    "editor_mins"           "-1 -1 -4"
    "editor_maxs"           "1 1 0"
    "ps_type"               "1"
    "editor_usage"          "Every time that it gets triggered changes the portalSky that follows the player starting from the initial spot since the start of the map, so if you retrigger it, it will preserve the relative position that it had since the start. There can be only one global portalSky per map."
}


//Text


entityDef text
{
	"editor_color"				".92 .7 .04"
	"editor_mins"				"-4 -4 -4"
	"editor_maxs"				"4 4 4"
	"editor_showangle"			"1"
	"editor_rotatable"			"1"

	"editor_usage"				"Used to display debug text in the level."
	"editor_var text"			"Text to print"
	"editor_var force"			"If set to 1 prints always otherwise only in developer mode only"
	"editor_var playerOriented" "if set to 1 text always faces the player" 

	"spawnclass"				"idTextEntity"
}

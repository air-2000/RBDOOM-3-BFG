/*
=======================
Available Script Events
=======================
*/

/*
========================
System Events ( 'sys.' )
========================
*/

// Terminates a thread.
scriptEvent	void 	terminate( float threadNumber );

// Pauses the current thread.
scriptEvent	void 	pause();

// Stops the current thread for the specified time ( in seconds ).
scriptEvent	void 	wait( float time );

// Stops execution for one game frame.
scriptEvent	void 	waitFrame();

// Waits for an entity to stop moving.
scriptEvent	void 	waitFor( entity mover );

// Waits for the given thread to terminate.
scriptEvent	void 	waitForThread( float threadNumber );

// Prints a string to the console.
scriptEvent	void 	print( string text );

// Prints a line to the console.
scriptEvent	void 	println( string text );

// Print a line on the network ( mp ).
scriptEvent void	say( string text );

// Breaks if the condition is zero. (Only in debug builds.)
scriptEvent	void 	assert( float condition );

// Triggers an entity.
scriptEvent	void 	trigger( entity entityToTrigger );

// Sets a cvar.
scriptEvent	void 	setcvar( string name, string value );

// Gets a string for a cvar.
scriptEvent	string	getcvar( string name );

// Returns a random value X ( 0 <= X < range ).
scriptEvent	float	random( float range );

// Returns the current game time ( in seconds ).
scriptEvent	float	getTime();

// Kills all threads with the specified name
scriptEvent	void 	killthread( string threadName );

// Sets the name of the current thread.
scriptEvent	void 	threadname( string name );

// Returns a reference to an entity.
scriptEvent	entity	getEntity( string name );

// Creates an entity of the specified classname and returns a reference to it.
scriptEvent	entity	spawn( string classname );

// Respawn
scriptEvent void	respawn( );

// Copies the spawn args from an entity.
scriptEvent	void 	copySpawnArgs( entity ent );

// Sets a key/val to use when a new entity is spawned.
scriptEvent	void 	setSpawnArg( string key, string value );

// Returns the string for the given spawn arg.
scriptEvent	string	SpawnString( string key, string default );

// Returns the float value for the given spawn arg.
scriptEvent	float	SpawnFloat( string key, float default );

// Returns the vector value for the given spawn arg.
scriptEvent	vector	SpawnVector( string key, vector default );

// Clears data persistant between levels.
scriptEvent	void 	clearPersistantArgs();

// Sets a key/val persistant between levels.
scriptEvent	void 	setPersistantArg( string key, string value );

// Returns a string for the given persistant arg.
scriptEvent	string	getPersistantString( string key );

// Returns a float value for a persistant arg.
scriptEvent	float	getPersistantFloat( string key );

// Returns a vector for a persistant arg
scriptEvent	vector	getPersistantVector( string key );

// Returns a forward vector for Euler angles.
scriptEvent	vector	angToForward( vector angles );

// Returns a right vector for Euler angles.
scriptEvent	vector	angToRight( vector angles );

// Returns an up vector for Euler angles.
scriptEvent	vector	angToUp( vector angles );

// Returns a sine of an angle ( in degrees ).
scriptEvent	float	sin( float degrees );

// Returns a cosine of an angle ( in degrees ).
scriptEvent	float	cos( float degrees );

// Returns a square root of a number.
scriptEvent	float	sqrt( float square );

// Returns a normalized version of a vector.
scriptEvent	vector	vecNormalize( vector vec );

// Returns the length of a vector.
scriptEvent	float	vecLength( vector vec );

// Returns a dot product of two vectors.
scriptEvent	float	DotProduct( vector vec1, vector vec2 );

// Returns a cross product of two vectors.
scriptEvent	vector	CrossProduct( vector vec1, vector vec2 );

// Returns Euler angles for a specific direction.
scriptEvent	vector	VecToAngles( vector vec );

// Sets a script callback function when a signal is raised on an entity.
scriptEvent	void 	onSignal( float signalNum, entity ent, string functionName );

// Clears a script callback function when the a signal is raised on an entity.
scriptEvent	void 	clearSignalThread( float signalNum, entity ent );

// Turns player view control to a camera entity.
scriptEvent	void 	setCamera( entity cameraEnt );

// Returns player view control to the player entity.
scriptEvent	void 	firstPerson();

// Returns the fraction of movement completed before a box from 'mins' to 'maxs' hits solid geometry ( from 'start' to 'end', non-solid during the move ).
scriptEvent	float	trace( vector start, vector end, vector mins, vector maxs, float contents_mask, entity passEntity );

// Returns the fraction of movement completed before a trace hits solid geometry ( from 'start' to 'end'. non-solid during the move ).
scriptEvent	float	tracePoint( vector start, vector end, float contents_mask, entity passEntity );

// Returns the fraction of movement completed during the last call to trace or tracePoint.
scriptEvent	float	getTraceFraction();

// Returns the position the trace stopped at when colliding with solid geometry during the last call to trace or tracePoint.
scriptEvent	vector	getTraceEndPos();

// Returns the normal of the hit plane during the last call to trace or tracePoint.
scriptEvent	vector	getTraceNormal();

// Returns a reference to the entity which was hit during the last call to trace or tracePoint.
scriptEvent	entity	getTraceEntity();

// Returns the number of the skeletal joint closest to the location on the entity which was hit during the last call to trace or tracePoint.
scriptEvent	string	getTraceJoint();

// Returns the body part number of the entity which was hit during the last call to trace or tracePoint.
scriptEvent	string	getTraceBody();

// Fades towards the given color ( in seconds ).
scriptEvent	void 	fadeIn( vector color, float time );

// Fades from the given color ( in seconds ).
scriptEvent	void 	fadeOut( vector color, float time );

// Fades to the given color up to the given alpha ( in seconds ).
scriptEvent	void 	fadeTo( vector color, float alpha, float time );

// Starts playing background music.
scriptEvent	void 	music( string shaderName );

// Issues an error.
scriptEvent	void 	error( string text );

// Issues a warning.
scriptEvent	void 	warning( string text );

// Returns the number of characters in a string
scriptEvent	float	strLength( string text );

// Returns a string composed of the first num characters.
scriptEvent	string	strLeft( string text, float num );

// Returns a string composed of the last num characters.
scriptEvent	string	strRight( string text, float num );

// Returns the string following the first num characters.
scriptEvent	string	strSkip( string text, float num );

// Returns a string composed of the characters from start to start + num.
scriptEvent	string	strMid( string text, float start, float num );

// Returns the numeric value of a string.
scriptEvent float strToFloat( string text );

// Damages entities within a damageDef radius. Inflictor causes the damage and, can be the same as the attacker.
// Projectiles are inflictors while characters that cast them are attackers. A specific entity can be ignored.
// dmgPower scales the damage ( e.g. when it's dependent on time).
scriptEvent void radiusDamage( vector origin, entity inflictor, entity attacker, entity ignore, string damageDefName, float dmgPower );

// Networking - checks for client.
scriptEvent float	isClient();

// Checks if the current session is multiplayer.
scriptEvent float	isMultiplayer();

// Returns the length of time between game frames ( unrelated to renderer frame rate ).
scriptEvent float	getFrameTime();

// returns the number of game frames per second ( unrelated to renderer frame rate ).
scriptEvent float	getTicsPerSecond();

// Makes sure that the specified snd shader is loaded by the system ( prevents cache hits when playing snd shaders ).
scriptEvent	void 	cacheSoundShader( string shaderName );

// Drawing for debug visualization ( lifetime of 0 == 1 frame ).
scriptEvent	void 	debugLine( vector color, vector start, vector end, float lifetime );
scriptEvent	void 	debugArrow( vector color, vector start, vector end, float size, float lifetime );
scriptEvent	void 	debugCircle( vector color, vector origin, vector dir, float radius, float numSteps, float lifetime );
scriptEvent	void 	debugBounds( vector color, vector mins, vector maxs, float lifetime );

// Text drawing for debugging ( align: 0-left, 1-center, 2-right,  lifetime of 0 == 1 frame ).
scriptEvent	void 	drawText( string text, vector origin, float scale, vector color, float align, float lifetime );

// Checks if an influence is active.
scriptEvent float	influenceActive();

/*
========
Entities
========
*/

// Removes entity.
scriptEvent	void 	remove();

// Returns name of an entity.
scriptEvent	string	getName();

// Sets entity name.
scriptEvent	void 	setName( string name );

// Activate entity with the activator as the agent.
scriptEvent	void 	activate( entity activator );

// Activate target entities.
scriptEvent	void 	activateTargets( entity activator );

// Returns the number of target entities.
scriptEvent	float	numTargets();

// Returns the requested target entity.
scriptEvent	entity	getTarget( float num );

// Returns a random targeted entity, the parameter skips a specific entity.
scriptEvent	entity	randomTarget( string ignoreName );

// Binds orientation and position of an entity in relation to master.
scriptEvent	void 	bind( entity master );

// Binds position of an entity in relation to master.
scriptEvent	void 	bindPosition( entity master );

// Binds orientation and position of an entity in relation to a joint of another entity.
scriptEvent	void 	bindToJoint( entity master, string boneName, float rotateWithMaster );

// Unbinds entity from its master.
scriptEvent	void 	unbind();

// Removes all bound entities.
scriptEvent	void 	removeBinds();

// Sets the owner of this entity, the entiy will not collide with the new owner.
scriptEvent	void 	setOwner( entity owner );

// Sets the entity model.
scriptEvent	void 	setModel( string modelName );

// Sets entity skin, use " " to turn a skin off.
scriptEvent	void 	setSkin( string skinName );

// Returns the worldspace position of an entity with disregard to parent.
scriptEvent	vector	getWorldOrigin();

// Sets a new entity position with disregard to parent.
scriptEvent	void	setWorldOrigin( vector origin );

// Returns current entity position ( relative to parent ).
scriptEvent	vector	getOrigin();

// Sets current entity position ( relative to parent ).
scriptEvent	void 	setOrigin( vector origin );

// Returns current entity orientation ( relative to parent ).
scriptEvent	vector	getAngles();

// Sets current entity orientation ( relative to parent ).
scriptEvent	void 	setAngles( vector angles );

// Gets the linear velocity of a physics object entity ( vector define for the translation of the center of mass in units per second ).
scriptEvent	vector	getLinearVelocity();

// Sets the linear velocity of a physics object entity in units per second ( vector define for the translation of the center of mass in units per second ).
scriptEvent	void 	setLinearVelocity( vector velocity );

// Gets the angular velocity of a physics object entity ( vector that passes through the center of mass ).
// Vector direction defines the axis of rotation and the magnitude ( rate of rotation in radians per second ).
scriptEvent	vector	getAngularVelocity();

// Sets the angular velocity of a physics object entity ( vector that passes through the center of mass ).
// Vector direction defines the axis of rotation and the magnitude ( rate of rotation in radians per second ).
scriptEvent	void 	setAngularVelocity( vector velocity );

// Gets the size of entity bbox.
scriptEvent	vector	getSize();

// Sets the size of entity bbox.
scriptEvent	void 	setSize( vector min, vector max );

// Gets min corner of entity bbox.
scriptEvent	vector	getMins();

// Gets max corner of entity bbox.
scriptEvent	vector	getMaxs();

// Checks if entity model is invisible.
scriptEvent	float	isHidden();

// Makes an entity invisible.
scriptEvent	void 	hide();

// Makes an entity visible if it has a model.
scriptEvent	void 	show();

// Returns true if specified entities touch.
scriptEvent	float	touches( entity other );

// Disables callback function on the specified signal.
scriptEvent	void 	clearSignal( float signalNum );

// Gets shader parm value.
scriptEvent	float	getShaderParm( float parm );

// Sets shader parm value.
scriptEvent	void 	setShaderParm( float parm, float value );

// Sets shader parms Parm0, Parm1, Parm2, and Parm3 ( RGBA ).
scriptEvent	void 	setShaderParms( float parm0, float parm1, float parm2, float parm3 );

// Sets entity RGB color ( parm0 - 2 ).
scriptEvent	void 	setColor( float red, float green, float blue );

// Gets entity color ( parm0 - 2 ).
scriptEvent	vector	getColor();

// Loads a specific snd shader and prevents cache hits when playing snd shaders.
scriptEvent	void 	cacheSoundShader( string shaderName );

// Plays a specific snd shader on a specific channel and returns its length in seconds ( does not ensure that the sound is loaded! )
scriptEvent	float	startSoundShader( string shaderName, float channel );

// Stops a specific snd shader on a specific channel.
scriptEvent	void 	stopSound( float channel, float netSync );

// Plays the sound specified by snd_* key/val on the channel and returns its length ( precaches the sound )
scriptEvent	float	startSound( string sound, float channel, float netSync );

// Fades the sound of an entity to a new level ( SND_CHANNEL_ANY for all played sounds ).
scriptEvent	void 	fadeSound( float channel, float newLevel, float fadeTime );

// Sets a parm on entity GUI.
scriptEvent	void 	setGuiParm( string key, string value );

// Sets a float parm on this entity GUI.
scriptEvent	void 	setGuiFloat( string key, float value );

// Searches for a spawn arg that matches a prefix e.g. "attack_target" matches "attack_target1", "attack_targetx", "attack_target_enemy", 
// the returned string is the name of the key which can then be passed into
// functions like getKey() to lookup the spawn arg value ( usefull you look up multiple values e.g. when you target multiple objects ).
// Finds the next matching key by passing in the previous result ( the next key returned is the first one that matches after the previous result )
// Use "" to get the first match,  returns "" when no more keys match ( acts like MatchPrefix in code ).
scriptEvent	string	getNextKey( string prefix, string lastMatch );

// Sets a spawn arg key ( won't change entity behavior, used to save data for later retrieval ).
scriptEvent	void 	setKey( string key, string value );

// Gets a spawn arg value.
scriptEvent	string	getKey( string key );

// Gets an int value of a spawn arg.
scriptEvent	float	getIntKey( string key );

// Gets a float value of a spawn arg.
scriptEvent	float	getFloatKey( string key );

// Gets a vector value of a spawn arg.
scriptEvent	vector	getVectorKey( string key );

// Gets the entity specified by a spawn arg.
scriptEvent	entity	getEntityKey( string key );

// Returns an entity to to its "origin" spawn arg position ( the position it was spawned in if it wasn't changed,
// doesn't check if it can be stuck in another entity after moving ).
scriptEvent	void 	restorePosition();

// Gets the distance between two entities.
scriptEvent	float	distanceTo( entity other );

// Gets the distance between an entity and a point.
scriptEvent	float	distanceToPoint( vector point );

// Starts an FX on an entity.
scriptEvent	void 	startFx( string fx );

// Stops current thread for one game frame.
scriptEvent	void 	waitFrame();

// Stops the current thread for the specified time ( in seconds ).
scriptEvent	void 	wait( float time );

// Checks if an entity script object has a specific function.
scriptEvent float	hasFunction( string functionName );

// Calls a function on an entity script object.
scriptEvent void	callFunction( string functionName );

// Enables or prevents an entity from going dormant.
scriptEvent void	setNeverDormant( float enable );

/*
=======
Cameras
=======
*/

// Starts a spline or anim camera moving.
scriptEvent	void 	start();

// Stops a spline or anim camera moving.
scriptEvent	void 	stop();


/*
======
Lights
======
*/

// Sets the shader to be used for the light.
scriptEvent	void 	setShader( string shader );

// Gets a shader parm.
scriptEvent	float	getLightParm( float parmNum );

// Sets a shader parm.
scriptEvent	void 	setLightParm( float parmNum, float value );

// Sets the RGBA shader parms on the light and the model.
scriptEvent	void 	setLightParms( float parm0, float parm1, float parm2, float parm3 );

// Sets the width/length/height of the light bbox.
scriptEvent	void 	setRadiusXYZ( float x, float y, float z );

// Sets the size of the bbox.
scriptEvent	void 	setRadius( float radius );

// Turns the light on.
scriptEvent	void 	On();

// Turns the light off.
scriptEvent	void 	Off();

// Fades the light out ( in seconds ).
scriptEvent	void 	fadeOutLight( float time );

// Fades the light in ( in seconds ).
scriptEvent	void 	fadeInLight( float time );


/*
===========
Force field
===========
*/

// Turns the force field on and off.
scriptEvent	void 	Toggle();


/*
=============
Func Animate
=============
*/

// Launches a projectile.
scriptEvent	void 	launchMissiles( string projectilename, string sound, string launchbone, string targetbone, float numshots, float framedelay );

// Switches to a ragdoll ( overrides animation ).
scriptEvent	void 	startRagdoll();

// Changes to left foot and plays footstep sound.
scriptEvent	void	leftFoot();

// Changes to right foot and plays footstep sound.
scriptEvent	void	rightFoot();


/*
======
Movers
======
*/

// Stops any translational movement.
scriptEvent	void 	stopMoving();

// Stops any rotational movement.
scriptEvent	void 	stopRotating();

// Sets the movement speed ( before initiating a new move ).
scriptEvent	void 	speed( float speed );

// Sets the movement time ( before initiating a new move ).
scriptEvent	void 	time( float time );

// Sets the deceleration time ( before initiating a new move ).
scriptEvent	void 	decelTime( float time );

// Sets the acceleration time ( before initiating a new move ).
scriptEvent	void 	accelTime( float time );

// Initiates a translation to the position of an entity ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	moveTo( entity targetEntity );

// Initiates a translation to an absolute position ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	moveToPos( vector pos );

// Initiates a translation with the given distance in the given yaw direction ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	move( float angle, float distance );

// Initiates an acceleration to a given speed over the time ( in seconds ).
scriptEvent	void 	accelTo( float speed, float time );

// Initiates a deceleration to a given speed over the time ( in seconds ).
scriptEvent	void 	decelTo( float speed, float time );

// Initiates a rotation on an axis by decreasing the current angle towards the desired angle ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	rotateDownTo( float axis, float angle );

// Initiates a rotation on an axis by increasing the current angle towards the desired angle ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	rotateUpTo( float axis, float angle );

// Initiates a rotation towards the specific Euler angles ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	rotateTo( vector angles );

// Initiates a rotation with the specific angular speed ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	rotate( vector angleSpeed );

// Initiates a rotation towards the current angles plus the specific Euler angles ( uses the current speed/time and acceleration and deceleration settings ).
scriptEvent	void 	rotateOnce( vector angles );

// Initiates a translation back and forth along a vector with the specific speed and sphase.
scriptEvent	void 	bob( float speed, float phase, vector distance );

// Initiates a rotation back and forth along specific angles with the specific speed and phase.
scriptEvent	void 	sway( float speed, float phase, vector angles );

// Opens the renderer portal for a mover.
scriptEvent	void 	openPortal();

// Closes the renderer portal for a mover.
scriptEvent	void 	closePortal();

// Sets mover acceleration sound.
scriptEvent	void 	accelSound( string sound );

// Sets mover deceleration sound.
scriptEvent	void 	decelSound( string sound );

// Sets the mover moving sound.
scriptEvent	void 	moveSound( string sound );

// Enables aligning the mover with the spline direction.
scriptEvent void	enableSplineAngles();

// Disables aligning the mover with the spline direction.
scriptEvent void	disableSplineAngles();

// Subtracts the initial spline angles ( used to maintain the initial orientation of the mover ).
scriptEvent void	removeInitialSplineAngles();

// Starts moving along a spline stored in an entity.
scriptEvent void	startSpline( entity spline );

// Stops moving along a spline.
scriptEvent void	stopSpline();

// Returns true if a mover is moving
scriptEvent float	isMoving();

// Returns true if a mover is rotating
scriptEvent float	isRotating();

/*
=====
Doors
=====
*/

// Enables the door.
scriptEvent	void 	enable();

// Disables the door.
scriptEvent	void 	disable();

// Opens the door.
scriptEvent	void 	open();

// Closes the door.
scriptEvent	void 	close();

// Locks or unlocks the door.
scriptEvent	void 	lock( float locked );

// Returns true if the door is open.
scriptEvent	float	isOpen();

// Returns true if the door is locked.
scriptEvent	float	isLocked();


/*
=====
Crane
=====
*/

// Sets the angle for a claw finger.
scriptEvent	void 	setFingerAngle( float angle );

// Stops finger movement.
scriptEvent	void 	stopFingers();


/*
=========
Moveables
=========
*/

// Makes the moveable non-solid.
scriptEvent	void 	becomeNonSolid();

// Returns true if the moveable is not moving.
scriptEvent	float	isAtRest();

// Enable/disable damage.
scriptEvent void	enableDamage( float enable );


/*
==================
Skeletal Animation
==================
*/

// Looks up the number of a joint ( returns INVALID_JOINT if it's not found ).
scriptEvent	float	getJointHandle( string jointname );

// Removes any custom transforms on all joints.
scriptEvent	void	clearAllJoints();

// Removes any custom transforms on a joint.
scriptEvent	void	clearJoint( float jointnum );

// Modifies the position of the joint based on the transform type.
scriptEvent	void	setJointPos( float jointnum, float transform_type, vector pos );

// Modifies the orientation of the joint based on the transform type.
scriptEvent	void	setJointAngle( float jointnum, float transform_type, vector angles );

// Returns the position of the joint in world space.
scriptEvent	vector	getJointPos( float jointnum );

// Returns the angular orientation of the joint in world space
scriptEvent	vector	getJointAngle( float jointnum );

/*
======
Actors
======
*/

// Moves a specific constraint that binds this entity to another entity.
scriptEvent	void	SetConstraintPosition( string constraintName, vector position );

// Enables eye focus.
scriptEvent	void 	enableEyeFocus();

// Disables eye focus.
scriptEvent	void 	disableEyeFocus();

// Changes to left foot and plays footstep sound.
scriptEvent	void 	leftFoot();

// Changes to right foot and plays footstep sound.
scriptEvent	void 	rightFoot();

// Stops the animation currently playing on a specific given channel ( over the number of frames ).
scriptEvent	void 	stopAnim( float channel, float frames );

// Plays an animation on a specific channel ( returns false if the anim doesn't exist ).
scriptEvent	float	playAnim( float channel, string animName );

// Loops an animation on a specific channel ( returns false if anim doesn't exist ).
scriptEvent	float	playCycle( float channel, string animName );

// Plays an idle animation on the specific channel ( returns false if anim doesn't exist ).
scriptEvent	float	idleAnim( float channel, string animName );

// Sets the blend amount on multi-point anims.
scriptEvent	void	setSyncedAnimWeight( float channel, float animindex, float weight );

// Sets the number of blend frames between animations on the specific channel.
scriptEvent	void 	setBlendFrames( float channel, float blendFrame );

// Returns the number of frames to blend between animations on the specific channel.
scriptEvent	float 	getBlendFrames( float channel );

// Sets a new anim state script function for the specific channel.
scriptEvent	void 	animState( float channel, string stateFunction, float blendFrame );

// Returns the name of the current animation state script function used for the specific channel.
scriptEvent	string	getAnimState( float channel );

// Returns true if an animation state script function is currently used for the specific channel.
scriptEvent	float	inAnimState( float channel, string stateFunc );

// Finishes a wait action.
scriptEvent	void 	finishAction( string action );

// Returns true if the animation playing on the specific channel ( completes taking into account the number of blend frames ).
scriptEvent	float	animDone( float channel, float blendOutFrames );

// Disables the currently playing anim on the specific channel and syncs the animation with the anim of the closest animating channel.
scriptEvent	void 	overrideAnim( float channel );

// Prevents pain animations for a set duration ( in seconds ).
scriptEvent	void 	preventPain( float duration );

// Enables animation on the specific channel.
scriptEvent	void 	enableAnim( float channel, float blendFrames );

// Disables pain animations.
scriptEvent	void 	disablePain();

// Enables pain animations.
scriptEvent	void 	enablePain();

// Gets the name of the pain animation.
scriptEvent	string	getPainAnim();

// Sets a string which is placed in front of animation names.
scriptEvent	void 	setAnimPrefix( string prefix );

// Returns true if an entity has a specific animation.
scriptEvent	float	hasAnim( float channel, string animName );

// Makes sure that an animation exists and causes an error if it doesn't.
scriptEvent	void 	checkAnim( float channel, string animName );

// Chooses a random anim and returns the name ( can be used for doing move tests ).
scriptEvent	string	chooseAnim( float channel, string animName );

// Returns the length of the anim ( in seconds ). If the entity has multiple anims with animName,
// the length may not match the played anim ( used to get a non-random anim and pass that string into animLength ).
scriptEvent	float	animLength( float channel, string animName );

// Returns the distance that the anim travels. If the entity has multiple anims with animName,
// the distance may not match the played anim ( used to get a non-random anim and pass that string into animDistance ).
scriptEvent	float	animDistance( float channel, string animName );

// Returns true if the actor has one or more enemies.
scriptEvent	float	hasEnemies();

// Returns the next enemy the actor has acquired.
scriptEvent	entity	nextEnemy( entity lastEnemy );

// Returns the enemy closest to the given location.
scriptEvent	entity	closestEnemyToPoint( vector point );

// Sets the next state and waits until thread exits, or a frame delays before calling it. ( can be used for setting the state in the constructor ).
scriptEvent	void 	setNextState( string stateFunc );

// Sets the next state and switches to it.
scriptEvent	void 	setState( string stateFunc );
scriptEvent	string  getState();

// Returns the entity used for the character's head ( if applicable ).
scriptEvent	entity	getHead();

/*
======
Player
======
*/

// Returns the button state from the current usercmd.
scriptEvent	float	getButtons();

// Returns the movement relative to the player's view angles from the current usercmd.
// vector_x = forward, vector_y = right, vector_z = up
scriptEvent	vector	getMove();

// Returns the player view angles.
scriptEvent	vector	getViewAngles();

// Enables the player weapon.
scriptEvent void	enableWeapon();

// Lowers and disables the player weapon.
scriptEvent void	disableWeapon();

// Returns currently held weapon.
scriptEvent string	getCurrentWeapon();

// Returns previously held weapons.
scriptEvent string	getPreviousWeapon();

// Selects the weapon the player is holding.
scriptEvent void	selectWeapon( string weapon );

// Returns the entity for the player's weapon.
scriptEvent entity	getWeaponEntity();

// Opens PDA.
scriptEvent void	openPDA();

// Returns true if the player PDA is open.
scriptEvent float	inPDA();

/*
================
NPCs and Creatures
================
*/

// Finds the enemy player in PVS.
scriptEvent	entity	findEnemy( float onlyInFov );

// Finds the enemy monster in PVS.
scriptEvent	entity	findEnemyAI( float onlyInFov );

// Finds the enemy player in attack cones.
scriptEvent	entity	findEnemyInCombatNodes();

// Finds another character's closest reachable enemy.
scriptEvent	entity	closestReachableEnemyOfEntity( entity team_mate );

scriptEvent	entity	heardSound( float ignore_team );
scriptEvent	void 	setEnemy( entity enemy );
scriptEvent	void 	clearEnemy();
scriptEvent	void 	muzzleFlash( string jointname );

// Returns a created projectile.
scriptEvent	entity	createMissile( string jointname );

// Returns a fired projectile.
scriptEvent	entity	attackMissile( string jointname );

// Launches a missile at 'attack_target' ( returns fired projectile ).
scriptEvent	entity	fireMissileAtTarget( string jointname, string targetname );

// Returns the projectile.
scriptEvent	entity	launchMissile( vector origin, vector angles );

// Teturns true if the attack connects.
scriptEvent	float	attackMelee( string damageDef );
scriptEvent void	directDamage( entity damageTarget, string damageDef );
scriptEvent void	radiusDamageFromJoint( string jointname, string damageDef );
scriptEvent	void 	attackBegin( string damageDef );
scriptEvent	void 	attackEnd();
scriptEvent	float	meleeAttackToJoint( string joint, string damageDef );
scriptEvent	entity  randomPath();
scriptEvent	float	canBecomeSolid();
scriptEvent	void 	becomeSolid();
scriptEvent	void 	becomeNonSolid();

// Enables ragdoll ( if applicable ).
scriptEvent	float	becomeRagdoll();

// Disables ragdoll.
scriptEvent	void	stopRagdoll();

scriptEvent	void 	setHealth( float health );
scriptEvent	float	getHealth();
scriptEvent	void 	allowDamage();
scriptEvent	void 	ignoreDamage();
scriptEvent	float	getCurrentYaw();
scriptEvent	void 	turnTo( float yaw );
scriptEvent	void 	turnToPos( vector pos );
scriptEvent	void 	turnToEntity( entity ent );
scriptEvent float	moveStatus();
scriptEvent	void 	stopMove();
scriptEvent	void 	moveToCover();
scriptEvent	void 	moveToEnemy();
scriptEvent	void 	moveToEnemyHeight();
scriptEvent	void 	moveOutOfRange( entity ent, float range );
scriptEvent	void 	moveToAttackPosition( entity ent, string attack_anim );
scriptEvent	void 	wander();
scriptEvent	void 	moveToEntity( entity destination );
scriptEvent	void 	moveToPosition( vector position );
scriptEvent	void 	slideTo( vector position, float time );
scriptEvent	float	facingIdeal();
scriptEvent	void 	faceEnemy();
scriptEvent	void 	faceEntity( entity ent );
scriptEvent	entity	getCombatNode();
scriptEvent	float	enemyInCombatCone( entity combatNode, float use_current_enemy_location );
scriptEvent	void 	waitMove();
scriptEvent	vector	getJumpVelocity( vector pos, float speed, float max_jump_height );
scriptEvent float	entityInAttackCone( entity ent );
scriptEvent	float	canSee( entity ent );
scriptEvent	float	enemyRange();
scriptEvent float	enemyRange2D();

// Sets the entity ( player ) trying to talk to the NPC.
scriptEvent	void	setTalkTarget( entity target );

// Returns the entity ( player ) trying to talk to the character.
scriptEvent	entity	getTalkTarget();

scriptEvent	entity	getEnemy();
scriptEvent	vector	getEnemyPos();
scriptEvent	vector	getEnemyEyePos();

// Tries to predict the player's movement based on the AAS and his direction of movement.
scriptEvent	vector	predictEnemyPos( float time );

scriptEvent	float	canHitEnemy();
scriptEvent	float	canHitEnemyFromAnim( string anim );
scriptEvent	float	canHitEnemyFromJoint( string jointname );
scriptEvent float	enemyPositionValid();
scriptEvent	void 	chargeAttack( string damageDef );
scriptEvent	float	testChargeAttack();
scriptEvent	float	testAnimMoveTowardEnemy( string animname );
scriptEvent	float	testAnimMove( string animname );
scriptEvent float	testMoveToPosition( vector position );
scriptEvent	float	testMeleeAttack();
scriptEvent	float	testAnimAttack( string animname );
scriptEvent void	preBurn();
scriptEvent	void 	burn();
scriptEvent	void 	clearBurn();

// Enables/disables smoke particles on bones ( pass in the particle #, or ALL_PARTICLES for turning on/off all particle systems,
// particles are spawned in the order they appear in the entityDef ).
scriptEvent void	setSmokeVisibility( float particle_num, float on );	

// Returns the # of emitters defined by 'smokeParticleSystem' in the entitydef.
scriptEvent float	numSmokeEmitters();	

scriptEvent	void 	waitAction( string name );
scriptEvent	void 	stopThinking();
scriptEvent	float	getTurnDelta();

// Returns the current movetype.
scriptEvent	float	getMoveType();

// Sets the current movetype ( in ai_base.script ).
scriptEvent	void 	setMoveType( float movetype );

scriptEvent	void 	saveMove();
scriptEvent	void 	restoreMove();
scriptEvent	void 	allowMovement( float allow );
scriptEvent	void 	enableClip();
scriptEvent	void 	disableClip();
scriptEvent	void 	enableGravity();
scriptEvent	void 	disableGravity();
scriptEvent	void 	enableAFPush();
scriptEvent	void 	disableAFPush();

// Sets the speed of flying creatures ( also sets speed for moveTypeSlide ).
scriptEvent	void 	setFlySpeed( float speed );

// Sets the prefered height of flight relative to the player's view height.
scriptEvent	void 	setFlyOffset( float offset );

// Sets the prefered height of flight relative to the player's view height ( defined in defs ).
scriptEvent	void 	clearFlyOffset();

// Finds the closest targeted entity of the specified type.
scriptEvent	entity	getClosestHiddenTarget( string entity_type );

// Finds a random targeted entity of the specified type.
scriptEvent	entity	getRandomTarget( string entity_type );

// Approximate travel distance to point.
scriptEvent	float	travelDistanceToPoint( vector destination );

// Approximate travel distance to entity.
scriptEvent	float	travelDistanceToEntity( entity destination );

// Approximate travel distance between two entities.
scriptEvent	float	travelDistanceBetweenEntities( entity source, entity dest );

// Approximate travel distance between two points.
scriptEvent	float	travelDistanceBetweenPoints( vector source, vector dest );

// Aims the character's eyes and head toward an entity for a period of time.
scriptEvent	void	lookAt( entity focusEntity, float duration );

// Aims the character's eyes and head toward the current enemy for a period of time.
scriptEvent	void	lookAtEnemy( float duration );

// Enables or disables head looking ( may be obsolete ).
scriptEvent	void 	setBoneMod( float allowBoneMod );

// Kills the creature.
scriptEvent void	kill();

// Tells the creature to activate when flashlight shines on it.
scriptEvent void	wakeOnFlashlight( float enable );

// Sets whether the player can talk to this NPC or not.
scriptEvent void	setTalkState( float state );

// Updates the last known position of the enemy ( disregarding if it's visible or not ).
scriptEvent void	locateEnemy();

// Kicks any obstacle in the character's path ( $null_entity if there's no specific entity to kick ).
scriptEvent void	kickObstacles( entity kickEnt, float force );

// Gets the obstacle in the character's path.
scriptEvent entity	getObstacle();

// Tries to push the point into a valid AAS area.
scriptEvent vector	pushPointIntoAAS( vector pos );

// Gets the rate the character turns.
scriptEvent float	getTurnRate();

// Sets the rate the character turns at.
scriptEvent void	setTurnRate( float rate );

// Enable/disable animation controlled turning ( pass in the maximum # of degrees the animation turns, 0 to disable ).
scriptEvent void	animTurn( float angle );

// Enables physics when the enemy is hidden.
scriptEvent void	allowHiddenMovement( float enable );

// Returns an entity within the specified area.
scriptEvent entity	findActorsInBounds( vector mins, vector maxs );

// Returns true if character can walk to specified position ( for walking creatures it should be positioned near the floor ).
scriptEvent float	canReachPosition( vector pos );

// Returns true if character can walk to entity's position ( for walking creatures it should be positioned near the floor ).
scriptEvent float	canReachEntity( entity ent );

// Returns true if character can walk to enemy's position ( for walking creatures it should be positioned near the floor ).
scriptEvent float	canReachEnemy();

// Returns the position of the entity within the AAS ( if applicable ), otherwise only the entity position.
scriptEvent vector	getReachableEntityPosition( entity ent );

/*
=======
Weapons
=======
*/

// Gets the current owner of the weapon.
scriptEvent	entity	getOwner();

// Switches to the next weapon.
scriptEvent	void 	nextWeapon();

// Sets a weapon state and animation blend frames.
scriptEvent	void 	weaponState( string stateFunction, float blendFrames );

// Removes the specified amount of ammo.
scriptEvent	void 	useAmmo( float amount );

// Adds ammo to clip.
scriptEvent	void 	addToClip( float amount );

// Gets the amount of ammo in a clip.
scriptEvent	float	ammoInClip();

// Checks the number of shots in the inventory.
scriptEvent	float	ammoAvailable();

// Checks the amount of ammo in inventory.
scriptEvent	float	totalAmmoCount();

// Checks the clip size.
scriptEvent	float	clipSize();

//Checks if the weapon is invisible.
scriptEvent float	isInvisible();

// Plays an animation on the specific channel ( returns false if anim doesn't exist, weapons use only ANIMCHANNEL_ALL ).
scriptEvent	float	playAnim( float channel, string animName );

// Loops an animation on the specific channel ( returns false if anim doesn't exist, weapons use only ANIMCHANNEL_ALL ).
scriptEvent	float	playCycle( float channel, string animName );

// Returns true if the animation is playing on a specific channel ( completes taking the amount of blend frames into account, weapons use only ANIMCHANNEL_ALL ).
scriptEvent	float	animDone( float channel, float blendOutFrames );

// Sets the number of blend frames between animations on a specific channel ( weapons use only ANIMCHANNEL_ALL ).
scriptEvent	void 	setBlendFrames( float channel, float blendFrame );

// Returns the number of frames to blend between animations on the specific channel ( weapons use only ANIMCHANNEL_ALL ).
scriptEvent	float 	getBlendFrames( float channel );

// Weapon States:
scriptEvent	void 	weaponReady();
scriptEvent void	weaponOutOfAmmo();
scriptEvent	void 	weaponReloading();
scriptEvent	void 	weaponHolstered();
scriptEvent	void 	weaponRising();
scriptEvent	void 	weaponLowering();
scriptEvent	void 	flashlight( float enable );
scriptEvent	void 	launchProjectiles( float num_projectiles, float spread, float fuseOffset, float launchPower, float dmgPower );
scriptEvent entity  createProjectile();
scriptEvent	float	melee();

// Enables/Disables weapon drop when the owner is killed.
scriptEvent void	allowDrop( float allow );

// UI check for auto reload.
scriptEvent float	autoReload();

// Network cliend.
scriptEvent void	netReload();

// Forces reload end.
scriptEvent void	netEndReload();

// Sets a shader param on the muzzleflash/light.
scriptEvent	void 	setLightParm( float parmNum, float value );

// Sets the RGBA shader parms on the muzzleflash/light.
scriptEvent	void 	setLightParms( float parm0, float parm1, float parm2, float parm3 );

// Returns the entity that controls the world model.
scriptEvent	entity	getWorldModel();

/*
=================
Projectile States
=================
*/

// Gets the current projectile state ( defined in doom_defs.script ).
scriptEvent	float	getProjectileState();

/*
============
Combat Nodes
============
*/

// Disables the combat node if "use_once" is set on.
scriptEvent	void 	markUsed();

/*
==========
Path Nodes
==========
*/

// Chooses a random path ( ignores non-path entities ).
scriptEvent	entity  randomPath();

/*
=========
AI Vagary
=========
*/

// Finds a moveable object to throw.
scriptEvent entity	vagary_ChooseObjectToThrow( vector mins, vector maxs, float speed, float minDist, float offset );

// Throws the object at the enemy.
scriptEvent void	vagary_ThrowObjectAtEnemy( entity ent, float speed );